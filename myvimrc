set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" " alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')
"
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
"
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo

" Color schemes
Plugin 'john2x/flatui.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'Valloric/YouCompleteMe'
Plugin 'bling/vim-airline'
Plugin 'wannesm/rmvim.vim'
" Git Gutter for Git diffs
""Plugin 'airblade/vim-gitgutter'
" Bundles; don't know the difference from plugins
Bundle 'kien/ctrlp.vim'
" Plugin 'kien/rainbow_parentheses.vim'
" Bundle 'tpope/vim-surround'
" Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'CruizeMissile/Revolution.vim'

" Plugins for/using tags
"" Gazetteer
Bundle 'jeetsukumaran/vim-gazetteer'
"" tagbar
Bundle 'majutsushi/tagbar'
Bundle 'Shougo/vimshell.vim'
Bundle 'Shougo/vimproc'
Bundle 'Shougo/unite.vim'

Bundle 'atelierbram/vim-colors_atelier-schemes'
" Use Jedi for python completions
""Plugin 'davidhalter/jedi-vim'

" Move between vim and tmux splits more easily
Bundle 'christoomey/vim-tmux-navigator'
" Markdown support
Bundle 'plasticboy/vim-markdown'
" Multiple cursors
Bundle 'terryma/vim-multiple-cursors'
" plugin from http://vim-scripts.org/vim/scripts.html
""Plugin 'L9'
" Plugin 'matlab'
" Plugin 'CSApprox'
" plugin not on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
" Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" "filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line"

" enable syntax highlighting
syntax enable
set hidden
"set foldcolumn=1

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set backupcopy=yes                                           " see :help crontab
set clipboard=unnamed                                        " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set expandtab                                                " expand tabs to spaces
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set number                                                   " show line numbers
set ruler                                                    " show where you are
set scrolloff=3                                              " show context above/below cursorline
set shiftwidth=4                                             " normal mode indentation commands use 4 spaces
set showcmd
set smartcase                                                " case-sensitive search if any caps
set softtabstop=2                                            " insert mode tab and backspace use 4 spaces
set tabstop=8                                                " actual tabs occupy 8 characters
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full
set nocursorline
" Disable scrollbar in vim
set guioptions-=r
set guioptions-=l
set guioptions-=L

" set a color column to highlight beyond col 80
" highlight ColorColumn ctermbg=235 guibg=#0a0b05
" let &colorcolumn=join(range(81,999),",")
"let &colorcolumn="81,81"


" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

" User defined commands
:command -nargs=1 -complete=dir CtrlPRD CtrlP <args>
:command WQ wq
:command Wq wq
:command W w
:command Q q

" keyboard shortcuts
let mapleader = ','
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" " CtrlP stuff
" nmap <leader>t :CtrlP<CR>
" nmap <leader>h :CtrlPRD<space>
" nmap <leader>j :CtrlPBuffer<CR>
" nmap <leader>k :CtrlPMRU<CR>
" nmap <leader>m :CtrlPMixed<CR>
" nmap <leader>/ :CtrlPLine<CR>
" nmap <leader>l :CtrlPGazetteer<CR>
" Unite.vim stuff
" keep these defined with mnemonics:
" <leader>f is file
" <leader>r is recursive
" <leader>b is buffer
" <leader>l is line
nnoremap <Leader>f :Unite -start-insert file<CR>
nnoremap <Leader>r :Unite -start-insert file_rec<CR>
nnoremap <Leader>b :Unite -start-insert buffer<CR>
nnoremap <Leader>l :Unite -buffer-name=search -start-insert line<cr>
" Unite searches using ag
let g:unite_source_grep_command = 'ag'
"nnoremap <leader>ag :Unite ag:.<CR>
" use this mapping for 'search text'
nnoremap <leader>t :Unite grep:.<CR>
" A mapping for tabular
" nmap <leader>l :Tabularize<space>
" vmap <leader>l :Tabularize<space>
""map <leader>l :Align
" nmap <leader>d :NERDTreeToggle<CR>
" nmap <leader>f :NERDTreeFind<CR>
"map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
" autocmd! bufwritepost .vimrc source ~/.vimrc

" Insert-mode mappings
inoremap <C-e> <Esc>A
inoremap <C-a> <Esc>I
inoremap <C-f> <Esc>la
inoremap <C-b> <Esc>i
" inoremap <C-d> <Esc>lxi
inoremap <C-d> <C-O>x
inoremap jj <Esc>
inoremap kk <Esc>

" plugin settings
let g:NERDSpaceDelims   = 1
let g:gitgutter_enabled = 0
" ZOMG the_silver_searcher is so much faster than ack"
let g:ackprg = 'ag --nogroup --column'
" let NERDTree change vim's current working directory
let g:NERDTreeChDirMode       = 2

"" Unite.vim settings
"  Enable fuzzy finder
call unite#filters#matcher_default#use(['matcher_fuzzy'])
"  Sort search results
call unite#filters#sorter_default#use(['sorter_rank'])
"  Make sure fuzzy matcher is used for all searches
call unite#custom#source('file,file/new,buffer,file_rec,line', 'matchers', 'matcher_fuzzy')

" search from vim's cwd instead of current file's cwd
let g:ctrlp_working_path_mode = 'rw'
" CtrlP
let g:ctrlp_working_path_mode = 2
let g:ctrlp_by_filename       = 1
let g:ctrlp_max_files         = 1500
let g:ctrlp_max_depth         = 5
let g:ctrlp_extensions        = ['line', 'gazetteer']
" rmvim setting
let g:rmvim_cmd = 'mvim'

" rainbow parens settings
" let g:rbpt_max = 16
" let g:rbpt_loadcmd_toggle = 0
" au VimEnter * RainbowParenthesesToggle
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces

" md is markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

"" Airline options
let g:airline_powerline_fonts = 1
"""let g:airline_theme = 'airlineish'
let g:airline_theme = 'understated'
let g:airline#extensions#tabline#enabled = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Go crazy!
if filereadable(expand("~/.vimrc.local"))
  " In your .vimrc.local, you might like:
  "
  " set autowrite
  " set nocursorline
  " set nowritebackup
  " set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines
  "
  " autocmd! bufwritepost .vimrc source ~/.vimrc
  " noremap! jj <ESC>
  source ~/.vimrc.local
endif

" Octave syntax 
augroup filetypedetect 
  au! BufRead,BufNewFile *.m,*.oct set filetype=octave 
augroup END 

" Brian's edits
""set foldmethod=indent
set background=dark
""set background=light

" Decent color schemes
" :colorscheme flattown
" :colorscheme Revolution
" :colorscheme sorcerer
" :colorscheme SlateDark
" :colorscheme apprentice
:colorscheme default
